server {
	listen      80;
	listen      443 ssl;
	server_name logs.vvv.dev;
	gzip        off;

	error_log   /srv/log/logs.vvv.dev_error.log;
	access_log  /srv/log/logs.vvv.dev_access.log;

	root        {vvv_path_to_folder}/vendor/potsky/pimp-my-log;

	location / {
		index index.php index.html;
		try_files $uri $uri/ /index.php?$args;
	}

	# this prevents hidden files (beginning with a period) from being served
	location ~ /\. {
		access_log off;
		log_not_found off;
		deny all;
	}

	location ~ \.php$ {
		# Try the files specified in order. In our case, try the requested URI and if
		# that fails, try (successfully) to pass a 404 error.
		try_files      $uri =404;

		# Include the fastcgi_params defaults provided by nginx
		include        /etc/nginx/fastcgi_params;

		# The amount of time for upstream to wait for a fastcgi process to send data.
		# We keep this *extremely* high so that one can be lazy when remote debugging.
		fastcgi_read_timeout 3600s;

		# Buffer size for reading the header of the backend FastCGI process.
		# This defaults to the value of a single fastcgi_buffers, so does not
		# need to be specified in our case, but it's good to be explicit.
		fastcgi_buffer_size 128k;

		# The number and size of the buffers into which the reply from the FastCGI
		# process in the backend is read.
		#
		# 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
		# to disk and replies under 512k are handled directly in memory.
		fastcgi_buffers 4 128k;

		# SCRIPT_FILENAME is a required parameter for things to work properly,
		# but was missing in the default fastcgi_params on upgrade to nginx 1.4.
		# We define it here to be sure that it exists.
		fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

		# Use the upstream for php5-fpm that we defined in nginx.conf
		fastcgi_pass   php;

		# And get to serving the file!
		fastcgi_index  index.php;
	}
}

server {
	listen      80;
	listen      443 ssl;
	server_name opcache-status.vvv.dev;
	gzip        off;

	error_log   /srv/log/opcache-status.vvv.dev_error.log;
	access_log  /srv/log/opcache-status.vvv.dev_access.log;

	root        {vvv_path_to_folder}/vendor/rlerdorf/opcache-status;

	location / {
		index opcache.php index.php index.html;
		try_files $uri $uri/ /index.php?$args;
	}

	# this prevents hidden files (beginning with a period) from being served
	location ~ /\. {
		access_log off;
		log_not_found off;
		deny all;
	}

	location ~ \.php$ {
		# Try the files specified in order. In our case, try the requested URI and if
		# that fails, try (successfully) to pass a 404 error.
		try_files      $uri =404;

		# Include the fastcgi_params defaults provided by nginx
		include        /etc/nginx/fastcgi_params;

		# The amount of time for upstream to wait for a fastcgi process to send data.
		# We keep this *extremely* high so that one can be lazy when remote debugging.
		fastcgi_read_timeout 3600s;

		# Buffer size for reading the header of the backend FastCGI process.
		# This defaults to the value of a single fastcgi_buffers, so does not
		# need to be specified in our case, but it's good to be explicit.
		fastcgi_buffer_size 128k;

		# The number and size of the buffers into which the reply from the FastCGI
		# process in the backend is read.
		#
		# 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
		# to disk and replies under 512k are handled directly in memory.
		fastcgi_buffers 4 128k;

		# SCRIPT_FILENAME is a required parameter for things to work properly,
		# but was missing in the default fastcgi_params on upgrade to nginx 1.4.
		# We define it here to be sure that it exists.
		fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

		# Use the upstream for php5-fpm that we defined in nginx.conf
		fastcgi_pass   php;

		# And get to serving the file!
		fastcgi_index  index.php;
	}
}

server {
	listen      80;
	listen      443 ssl;
	server_name webgrind.vvv.dev;
	gzip        off;

	error_log   /srv/log/webgrind.vvv.dev_error.log;
	access_log  /srv/log/webgrind.vvv.dev_access.log;

	root        {vvv_path_to_folder}/vendor/jokkedk/webgrind;

	location / {
		index index.php index.html;
		try_files $uri $uri/ /index.php?$args;
	}

	# this prevents hidden files (beginning with a period) from being served
	location ~ /\. {
		access_log off;
		log_not_found off;
		deny all;
	}

	location ~ \.php$ {
		# Try the files specified in order. In our case, try the requested URI and if
		# that fails, try (successfully) to pass a 404 error.
		try_files      $uri =404;

		# Include the fastcgi_params defaults provided by nginx
		include        /etc/nginx/fastcgi_params;

		# The amount of time for upstream to wait for a fastcgi process to send data.
		# We keep this *extremely* high so that one can be lazy when remote debugging.
		fastcgi_read_timeout 3600s;

		# Buffer size for reading the header of the backend FastCGI process.
		# This defaults to the value of a single fastcgi_buffers, so does not
		# need to be specified in our case, but it's good to be explicit.
		fastcgi_buffer_size 128k;

		# The number and size of the buffers into which the reply from the FastCGI
		# process in the backend is read.
		#
		# 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
		# to disk and replies under 512k are handled directly in memory.
		fastcgi_buffers 4 128k;

		# SCRIPT_FILENAME is a required parameter for things to work properly,
		# but was missing in the default fastcgi_params on upgrade to nginx 1.4.
		# We define it here to be sure that it exists.
		fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

		# Use the upstream for php5-fpm that we defined in nginx.conf
		fastcgi_pass   php;

		# And get to serving the file!
		fastcgi_index  index.php;
	}
}

server {
	listen      80;
	listen      443 ssl;
	server_name database-admin.vvv.dev;
	gzip        off;

	error_log   /srv/log/database-admin.vvv.dev_error.log;
	access_log  /srv/log/database-admin.vvv.dev_access.log;

	root        {vvv_path_to_folder}/vendor/phpmyadmin/phpmyadmin;

	location / {
		index index.php index.html;
		try_files $uri $uri/ /index.php?$args;
	}

	# this prevents hidden files (beginning with a period) from being served
	location ~ /\. {
		access_log off;
		log_not_found off;
		deny all;
	}

	location ~ \.php$ {
		# Try the files specified in order. In our case, try the requested URI and if
		# that fails, try (successfully) to pass a 404 error.
		try_files      $uri =404;

		# Include the fastcgi_params defaults provided by nginx
		include        /etc/nginx/fastcgi_params;

		# The amount of time for upstream to wait for a fastcgi process to send data.
		# We keep this *extremely* high so that one can be lazy when remote debugging.
		fastcgi_read_timeout 3600s;

		# Buffer size for reading the header of the backend FastCGI process.
		# This defaults to the value of a single fastcgi_buffers, so does not
		# need to be specified in our case, but it's good to be explicit.
		fastcgi_buffer_size 128k;

		# The number and size of the buffers into which the reply from the FastCGI
		# process in the backend is read.
		#
		# 4 buffers at 128k means that any reply by FastCGI greater than 512k goes
		# to disk and replies under 512k are handled directly in memory.
		fastcgi_buffers 4 128k;

		# SCRIPT_FILENAME is a required parameter for things to work properly,
		# but was missing in the default fastcgi_params on upgrade to nginx 1.4.
		# We define it here to be sure that it exists.
		fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

		# Use the upstream for php5-fpm that we defined in nginx.conf
		fastcgi_pass   php;

		# And get to serving the file!
		fastcgi_index  index.php;
	}
}
