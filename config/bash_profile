# bash_profile
#
# Symlinked to the vagrant user's home directory. This loads
# the default .bashrc provided by the virtual machine, which in
# turn loads the .bash_aliases file that we provide. Use this
# bash_profile to set environment variables and such.

# if running bash
if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi

# setup bash prompt
if [ -n "$BASH_VERSION" ]; then
    # include .bash_prompt if it exists
    if [ -f "$HOME/.bash_prompt" ]; then
        . "$HOME/.bash_prompt"
    fi
fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# Set the WP_TESTS_DIR path directory so that we can use phpunit inside
# plugins almost immediately.
export WP_TESTS_DIR=/srv/www/wordpress-develop/public_html/tests/phpunit/
# Set the WP_CORE_DIR path so phpunit tests are run against WP trunk
export WP_CORE_DIR=/srv/www/wordpress-develop/public_html/src/

# add autocomplete for grunt
eval "$(grunt --completion=bash)"

# add autocomplete for wp-cli
. /srv/config/wp-cli/wp-completion.bash

# PHPCS path
export PATH="$PATH:/srv/www/phpcs/scripts/"

# nvm path
export NVM_DIR="/srv/config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

__has_parent_dir () {
    # Utility function so we can test for things like .git/.hg without firing up a
    # separate process
    test -d "$1" && return 0;

    current="."
    while [ ! "$current" -ef "$current/.." ]; do
        if [ -d "$current/$1" ]; then
            return 0;
        fi
        current="$current/..";
    done

    return 1;
}

__vcs_name() {
    if [ -d .svn ]; then
        echo "-[svn]";
    elif __has_parent_dir ".git"; then
        echo "-[$(__git_ps1 'git %s')]";
    elif __has_parent_dir ".hg"; then
        echo "-[hg $(hg branch)]"
    fi
}

black=$(tput -Txterm setaf 0)
red=$(tput -Txterm setaf 1)
green=$(tput -Txterm setaf 2)
yellow=$(tput -Txterm setaf 3)
dk_blue=$(tput -Txterm setaf 4)
pink=$(tput -Txterm setaf 5)
lt_blue=$(tput -Txterm setaf 6)

bold=$(tput -Txterm bold)
reset=$(tput -Txterm sgr0)

# Nicely formatted terminal prompt
export PS1='\n\[$bold\]\[$black\][\[$dk_blue\]\@\[$black\]]-[\[$green\]\u\[$yellow\]@\[$green\]\h\[$black\]]-[\[$pink\]\w\[$black\]]\[\033[0;33m\]$(__vcs_name) \[\033[00m\]\[$reset\]\n\[$reset\]\$ '
